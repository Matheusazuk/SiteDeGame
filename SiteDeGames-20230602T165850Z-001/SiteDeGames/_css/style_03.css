body {
    background-color: rgb(34, 34, 34);
    color: rgb(255, 255, 255);
    max-width: 1200px;
    margin: auto;
    padding: 10px;

}

header {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;

}

.titulo {
    text-align: center;
    flex-direction: column;
    line-height: 10px;

}

li {
    display: inline-block;
    margin: 20px;

}

a {
    color: rgb(255, 255, 255);
    text-decoration: none;
}

a:hover {
    background-color: rgb(2, 23, 255);
    transition: 0.5s;
    padding: 5px;
    border-radius: 10px;
}

#btn-conta {
    border: 2px solid rgb(2, 23, 255);
    border-radius: 15px;
    padding: 10px;
}

#btn-conta:hover {
    background-color: rgb(2, 23, 255);
    color: rgb(255, 255, 255);
}

h1 {
    font-weight: 200;
}

main {
    display: flex;
    flex-direction: row;
    margin-top: 100px;
    justify-content: space-around;

}

article {
    display: flex;
    flex-direction: column;
}

h2 {
    font-size: 40px;
    line-height: 2px;
    font-family: Arial, Helvetica, sans-serif;
}

span {
    color: rgb(232, 0, 0);
}

p {
    line-height: 20px;
    max-width: 500px;
    font-family: Verdana, Geneva, Tahoma, sans-serif;
    text-align: justify;
}

img {
    width: 700px;
}

form {
    display: flex;
    flex-direction: column;
    width: 70%;
}

form [type="submit"] {
    height: 50px;
    width: 50%;
    background-color: rgb(255, 0, 0);
    color: white;
    font-weight: bold;
}

form [type="submit"]:hover {
    cursor: pointer;
}

input {
    margin-top: 20px;
    height: 20px;
    padding: 15px;
    border-radius: 15px;
    border: none;
    font-size: 15px;
}

.text2 {
    color: rgb(2, 23, 255);
}

aside {
    width: 40%;
}

.slider_container {
    margin: 10px 15px;
    position: relative;
    width: 500px;
    height: 300px;
    /* O display: flex  
    Quando colocamos essa propriedade em um elemento, 
    esse elemento se torna um flex container, a partir daí podemos 
    manipular todos os elementos filhos desse flex container com propriedades novas. */
    display: flex;
    align-items: center;
    /* O objetivo do overflow é fazer com que conteúdos muito grandes possam 
    caber dentro de uma página através do uso de barras de rolagem. 
    hidden – Corta o conteúdo que ultrapassa o tamanho da DIV.*/
    overflow: hidden;
}

.slider {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: row;
    align-items: center;
    /* animation é usado para animar outras propriedades CSS 
    ease-in-out: realiza a transição com o início e final lentos; */
    animation: 18s ease-in-out sliding infinite;
}

.slide {
    position: relative;
    min-width: 100%;
    height: 100%;
}

.um {
    background-image: url(../_img/1.jfif);
    background-size: cover;
}

.dois {
    background-image: url(../_img/2.jpg);
    background-size: cover;
}

.tres {
    background-image: url(../_img/3.jfif);
    background-size: cover;
}


/*
    A regra @keyframes vai definir as etapas da animação. 
    Com essa regra vamos informar o início e o final do valor 
    da propriedade CSS que desejamos animar.
   */
@keyframes sliding {
    0% {
        /*
      a propriedade transform permite manipular visualmente um elemento.
      A função de translate serve para mover o elemento. 
      A sintaxe pode ser especifica para um dos eixos x/y (translateX ou translateY)
      */
        transform: translateX(0%);
    }

    5% {
        transform: translateX(0%);
    }

    35% {
        transform: translateX(-100%);
    }

    45% {
        transform: translateX(-100%);
    }

    70% {
        transform: translateX(-200%);
    }

    80% {
        transform: translateX(-200%);
    }

    100% {
        transform: translateX(-300%);
    }

}